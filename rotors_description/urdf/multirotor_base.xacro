<?xml version="1.0"?>
<!--
  Copyright 2015 Fadri Furrer, ASL, ETH Zurich, Switzerland
  Copyright 2015 Michael Burri, ASL, ETH Zurich, Switzerland
  Copyright 2015 Mina Kamel, ASL, ETH Zurich, Switzerland
  Copyright 2015 Janosch Nikolic, ASL, ETH Zurich, Switzerland
  Copyright 2015 Markus Achtelik, ASL, ETH Zurich, Switzerland

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<robot xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Macro for the inertia of a box -->
  <xacro:macro name="box_inertia" params="x y z mass">
    <inertia ixx="${0.0833333 * mass * (y*y + z*z)}" ixy="0.0" ixz="0.0"
      iyy="${0.0833333 * mass * (x*x + z*z)}" iyz="0.0"
      izz="${0.0833333 * mass * (x*x + y*y)}" />
  </xacro:macro>

  <!-- Macro for the inertial properties of a box -->
  <xacro:macro name="box_inertial" params="x y z mass *origin">
    <inertial>
      <mass value="${mass}" />
      <xacro:insert_block name="origin" />
      <xacro:box_inertia x="${x}" y="${y}" z="${z}" mass="${mass}" />
    </inertial>
  </xacro:macro>

  <!-- Main multirotor link -->
  <xacro:macro name="multirotor_base_macro"
    params="robot_namespace mass body_width body_height use_mesh_file mesh_file *inertia">
    <link name="${robot_namespace}/base_link"></link>

    <joint name="${robot_namespace}/base_joint" type="fixed">
      <origin xyz="0 0 0" rpy="0 0 0" />
      <parent link="${robot_namespace}/base_link" />
      <child link="${robot_namespace}/base_link_inertia" />
    </joint>

    <link name="${robot_namespace}/base_link_inertia">
      <inertial>
        <mass value="${mass}" />  <!-- [kg] -->
        <origin xyz="0 0 0" />
        <xacro:insert_block name="inertia" />
      </inertial>

      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <xacro:if value="${use_mesh_file}">
            <mesh filename="${mesh_file}" scale="1 1 1" />
          </xacro:if>
          <xacro:unless value="${use_mesh_file}">
            <box size="${body_width} ${body_width} ${body_height}"/> <!-- [m] [m] [m] -->
          </xacro:unless>
        </geometry>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <box size="${body_width} ${body_width} ${body_height}" /> <!-- [m] [m] [m] -->
        </geometry>
      </collision>
    </link>

    <!-- STARTING ADDITIONAL THINGS FOR GIMBAL -->
     <joint name="gimbal_y_joint_" type="revolute">
      <parent link="${robot_namespace}/base_link"/>
      <child link="${robot_namespace}/gimbal_y_link"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <axis xyz="0 0 1"/>
      <limit effort=".25" velocity=".25" lower="-1" upper="1"/>
      <dynamics damping="1e-4" friction="1e-4"/> 
	  </joint>
	
    <link name="${robot_namespace}/gimbal_y_link">

      <inertial>
          <mass value="1e-3"/>
          <origin xyz="0 0 -0.06" rpy="0 0 0"/>
          <inertia ixx="1e-3" ixy="1e-5" ixz="1e-5" iyy="1e-3" iyz="1e-5" izz="1e-3"/>
      </inertial>
    </link> 


     <joint name="gimbal_p_joint_" type="revolute">
      <parent link="${robot_namespace}/gimbal_y_link"/>
      <child link="${robot_namespace}/gimbal_p_link"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
      <limit effort=".25" velocity=".25" lower="-1" upper="1"/>
      <dynamics damping="1e-4" friction="1e-4"/> 
	  </joint>
	
    <link name="${robot_namespace}/gimbal_p_link">
      <visual>
        <origin xyz="0 0 -0.06" rpy="0 0 0"/>
        <geometry>
            <box size="0.025 0.025 0.025" /> 
        </geometry>
      </visual>

      <inertial>
          <mass value="1e-3"/>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <inertia ixx="1e-3" ixy="1e-5" ixz="1e-5" iyy="1e-3" iyz="1e-5" izz="1e-3"/>
      </inertial>
    </link> 

    <xacro:gimbal_camera name="downward_cam" 
                         parent="${robot_namespace}/gimbal_p_link" 
                         ros_topic="camera/image" 
                         cam_info_topic="camera/camera_info" 
                         update_rate="20" 
                         res_x="640" 
                         res_y="480" 
                         image_format="R8G8B8" hfov="100">
        <origin xyz="0.1 0 0" rpy="0 0 0"/>
    </xacro:gimbal_camera>


    





    <gazebo>
      <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      </plugin>
    </gazebo>

    <transmission name="gimbal_yaw_axis">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="gimbal_y_joint_">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="gimbal_yaw_actuator">    
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
    </transmission>


    <transmission name="gimbal_pitch_axis">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="gimbal_p_joint_">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="gimbal_pitch_actuator">    
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>
    <!-- ENDING ADDITIONAL THINGS FOR GIMBAL -->

    <!-- attach multirotor_base_plugin to the base_link -->
    <gazebo>
      <plugin filename="librotors_gazebo_multirotor_base_plugin.so" name="multirotor_base_plugin">
        <robotNamespace>${robot_namespace}</robotNamespace>
        <linkName>${robot_namespace}/base_link</linkName>
        <rotorVelocitySlowdownSim>${rotor_velocity_slowdown_sim}</rotorVelocitySlowdownSim>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Rotor joint and link -->
  <xacro:macro name="vertical_rotor"
    params="robot_namespace suffix direction motor_constant moment_constant parent mass_rotor radius_rotor time_constant_up time_constant_down max_rot_velocity motor_number rotor_drag_coefficient rolling_moment_coefficient color use_own_mesh mesh *origin *inertia">
    <joint name="${robot_namespace}/rotor_${motor_number}_joint" type="continuous">
      <xacro:insert_block name="origin" />
      <axis xyz="0 0 1" />
      <!-- TODO(ff): not currently set because it's not yet supported -->
      <!-- <limit effort="2000" velocity="${max_rot_velocity}" /> -->
      <parent link="${parent}" />
      <child link="${robot_namespace}/rotor_${motor_number}" />
    </joint>
    <link name="${robot_namespace}/rotor_${motor_number}">
      <inertial>
        <mass value="${mass_rotor}" /> <!-- [kg] -->
        <xacro:insert_block name="inertia" />
      </inertial>
      <visual>
        <geometry>
          <!-- <cylinder length="0.005" radius="${radius_rotor}"/> --> <!-- [m] -->
          <xacro:if value="${use_own_mesh}">
            <mesh filename="${mesh}"
              scale="1 1 1" />
          </xacro:if>
          <xacro:unless value="${use_own_mesh}">
            <mesh filename="package://rotors_description/meshes/propeller_${direction}.dae"
              scale="${radius_rotor} ${radius_rotor} ${radius_rotor}" /> <!-- The propeller meshes have a radius of 1m -->
            <!-- <box size="${2*radius_rotor} 0.01 0.005"/> -->
          </xacro:unless>
        </geometry>
      </visual>
      <collision>
        <geometry>
          <cylinder length="0.005" radius="${radius_rotor}" /> <!-- [m] -->
        </geometry>
      </collision>
    </link>
    <gazebo>
      <plugin name="${robot_namespace}_${suffix}_motor_model" filename="librotors_gazebo_motor_model.so">
        <robotNamespace>${robot_namespace}</robotNamespace>
        <jointName>${robot_namespace}/rotor_${motor_number}_joint</jointName>
        <linkName>${robot_namespace}/rotor_${motor_number}</linkName>
        <turningDirection>${direction}</turningDirection>
        <timeConstantUp>${time_constant_up}</timeConstantUp>
        <timeConstantDown>${time_constant_down}</timeConstantDown>
        <maxRotVelocity>${max_rot_velocity}</maxRotVelocity>
        <motorConstant>${motor_constant}</motorConstant>
        <momentConstant>${moment_constant}</momentConstant>
        <commandSubTopic>gazebo/command/motor_speed</commandSubTopic>
        <motorNumber>${motor_number}</motorNumber>
        <rotorDragCoefficient>${rotor_drag_coefficient}</rotorDragCoefficient>
        <rollingMomentCoefficient>${rolling_moment_coefficient}</rollingMomentCoefficient>
        <motorSpeedPubTopic>motor_speed/${motor_number}</motorSpeedPubTopic>
        <rotorVelocitySlowdownSim>${rotor_velocity_slowdown_sim}</rotorVelocitySlowdownSim>
      </plugin>
    </gazebo>
    <gazebo reference="${robot_namespace}/rotor_${motor_number}">
      <material>Gazebo/${color}</material>
    </gazebo>
  </xacro:macro>

  <!-- GIMBAL CAMERA MACRO -->
  <xacro:property name="M_PI" value="3.1415926535897931" />

  <xacro:macro name="gimbal_camera" params="name parent *origin ros_topic cam_info_topic update_rate res_x res_y image_format hfov">

    <!-- Gimbal attached to UAV -->
    <joint name="gimbal_joint" type="fixed">
        <xacro:insert_block name="origin" />
        <parent link="${parent}" />
        <child link="gimbal_r_link" />
    </joint>

    <link name="gimbal_r_link">
      <inertial>
        <mass value="0" />
        <inertia ixx="0" ixy="0" ixz="0" iyy="0" iyz="0" izz="0" />
      </inertial>
    </link>

    <gazebo reference="gimbal_r_link">
      <sensor type="camera" name="${name}_camera_sensor">
        <update_rate>${update_rate}</update_rate>
        <camera>
          <horizontal_fov>${hfov * M_PI/180.0}</horizontal_fov>
          <image>
            <format>${image_format}</format>
            <width>${res_x}</width>
            <height>${res_y}</height>
          </image>
          <clip>
            <near>0.01</near>
            <far>100</far>
          </clip>
        </camera>

        <plugin name="${name}_camera_controller" filename="libgazebo_ros_camera.so">
          <cameraName>${name}</cameraName>
          <imageTopicName>${ros_topic}</imageTopicName>
          <cameraInfoTopicName>${cam_info_topic}</cameraInfoTopicName>
          <frameName>${name}_optical_frame</frameName>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>


</robot>


